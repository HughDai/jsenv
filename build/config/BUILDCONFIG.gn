# Copyright (c) 2021, the hapjs-platform Project Contributors
# SPDX-License-Identifier: EPL-1.0

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  if (target_os == "android") {
    target_cpu = "arm"
  } else {
    target_cpu = host_cpu
  }
}

if (current_cpu == "") {
  current_cpu = target_cpu
}

if (current_os == "") {
  current_os = target_os
}

declare_args() {
  is_debug = true
  is_clang = current_os == "android"
  target_os2 = ""
  is_component_build = false
  host_toolchain = ""

  # How many symbols to include in the build. This affects the performance of
  # the build since the symbols are large and dealing with them is slow.
  #   2 means regular build with symbols.
  #   1 means minimal symbols, usually enough for backtraces only.
  #   0 means no symbols.
  #   -1 means auto-set (off in release, regular in debug).
  symbol_level = -1

  # Flag controls whether gcov is enabled, default is off.
  is_gcov = false
}

####################################################
## Current OS platform configurations

is_android = false
is_linux = false
is_mac = false
is_win = false
is_posix = false
is_ios = false
is_chromeos = false
is_fuchsia = false
is_32bit = false
is_64bit = false

if (current_os == "win") {
  is_win = true
} else if (current_os == "linux") {
  is_linux = true
  is_posix = true
  is_clang = true
} else if (current_os == "android") {
  is_android = true
  is_posix = true
} else if (current_os == "mac") {
  is_mac = true
  is_posix = true
  is_clang = true
} else if(current_os == "ios") {
  is_ios = true
  is_posix = true
  is_clang = true
}

if (current_cpu == "arm" ||
    current_cpu == "x86") {
  is_32bit = true
} else if (current_cpu == "arm64" ||
           current_cpu == "x64") {
  is_64bit = true
}

# If it wasn't manually set, set to an appropriate default.
if (symbol_level == -1) {
  # Linux is slowed by having symbols as part of the target binary, so in
  # Release Linux, default them off.
  if (is_debug || !is_linux) {
    symbol_level = 2
  } else {
    symbol_level = 0
  }
}

#####################################################
## Toolchain configurations.
# Host toolchain setup.
if (host_toolchain == "") {
  if (host_os == "linux") {
    if (is_clang) {
      # TODO(liushouqun): clang support in linux Host should be supported.
      host_toolchain = "//build/toolchain/linux:linux_clang"
    } else {
      host_toolchain = "//build/toolchain/linux:linux_gcc"
    }
  } else if (host_os == "mac") {
    host_toolchain = "//build/toolchain/mac:mac_clang"
  } else {
    assert(false, "Only support Linux/Mac as the host build OS")
  }
}

# The default_toolchain for target_cpu/target_os.
_default_toolchain = ""

if (is_android) {
  _default_toolchain = "//build/toolchain/android:android_gcc_$target_cpu"
} else if (is_linux) {
  if (is_clang) {
    _default_toolchain = "//build/toolchain/linux:linux_clang"
  } else {
    _default_toolchain = "//build/toolchain/linux:linux_gcc"
  }
} else if (is_mac) {
  _default_toolchain = "//build/toolchain/mac:mac_clang"
} else if (is_ios) {
  import("//build/config/ios/ios_sdk.gni")
  host_toolchain = "//build/toolchain/mac:clang"
  if (use_ios_simulator) {
    _default_toolchain = "//build/toolchain/ios:ios_clang_x64"
  } else {
    _default_toolchain = "//build/toolchain/ios:ios_clang_arm"
  }
} else {
  assert(false, "Toolchain only supports Android/Linux/Mac/iOS")
}

set_default_toolchain(_default_toolchain)

#####################################################
## Compiler configurations.
default_compiler_configs = [
  "//build/config/compiler:compiler",
  "//build/config/compiler:compiler_arm_fpu",
  "//build/config/compiler:compiler_arm_thumb",
  "//build/config/compiler:default_include_dirs",
  "//build/config/compiler:default_optimization",
  "//build/config/compiler:no_exceptions",
  "//build/config/compiler:no_rtti",
  "//build/config/compiler:no_undefined",
  "//build/config/compiler:strict_checks",
  "//build/config/compiler:std_c",
  "//build/config/compiler:symbol_visibility_hidden",
]

default_compiler_configs += [ "//build/config:default_libs" ]

if (symbol_level == 2) {
  default_compiler_configs += [ "//build/config/compiler:symbols" ]
} else if (symbol_level == 1) {
  default_compiler_configs += [ "//build/config/compiler:minimal_symbols" ]
} else if (symbol_level == 0) {
  default_compiler_configs += [ "//build/config/compiler:no_symbols" ]
} else {
  assert(false, "Bad value for symbol_level.")
}

# Configs for sanitizers(asan/lsan/msan/tsan).
if (is_clang) {
  default_compiler_configs += [ "//build/config/sanitizers:sanitizer" ]
}

default_executable_configs = default_compiler_configs
if (is_android) {
  default_executable_configs += [ "//build/config/android:executatble_config" ]
}

if (is_mac) {
  default_executable_configs += [ "//build/config/mac:mac_dynamic_flags" ]
}

set_defaults("executable") {
  configs = default_executable_configs
}

set_defaults("shared_library") {
  configs = default_compiler_configs
}

set_defaults("static_library") {
  configs = default_compiler_configs
}

set_defaults("source_set") {
  configs = default_compiler_configs
}

template("component") {
  if (is_component_build) {
    _component_mode = "shared_library"
  } else if (defined(invoker.static_component_type)) {
    assert(invoker.static_component_type == "static_library" ||
           invoker.static_component_type == "source_set")
    _component_mode = invoker.static_component_type
  } else if (!defined(invoker.sources)) {
    # When there are no sources defined, use a source set to avoid creating
    # an empty static library (which generally don't work).
    _component_mode = "source_set"
  } else {
    _component_mode = "static_library"
  }
  target(_component_mode, target_name) {
    forward_variables_from(invoker, [ "visibility" ])
    forward_variables_from(invoker, "*", [ "visibility" ])
  }
}

set_defaults("component") {
  configs = default_compiler_configs
}

template("platform_library") {
  if (!is_mac && !is_ios) {
    shared_library(target_name) {
      # Configs will always be defined since we set_defaults for a component
      # above. We want to use those rather than whatever came with the nested
      # shared/static library inside the component.
      configs = []  # Prevent list overwriting warning.
      configs = invoker.configs

      # The sources assignment filter will have already been applied when the
      # code was originally executed. We don't want to apply it again, since
      # the original target may have override it for some assignments.
      set_sources_assignment_filter([])

      if (defined(invoker.all_dependent_configs)) {
        all_dependent_configs = invoker.all_dependent_configs
      }
      if (defined(invoker.allow_circular_includes_from)) {
        allow_circular_includes_from = invoker.allow_circular_includes_from
      }
      if (defined(invoker.cflags)) {
        cflags = invoker.cflags
      }
      if (defined(invoker.cflags_c)) {
        cflags_c = invoker.cflags_c
      }
      if (defined(invoker.cflags_cc)) {
        cflags_cc = invoker.cflags_cc
      }
      if (defined(invoker.cflags_objc)) {
        cflags_objc = invoker.cflags_objc
      }
      if (defined(invoker.cflags_objcc)) {
        cflags_objcc = invoker.cflags_objcc
      }
      if (defined(invoker.check_includes)) {
        check_includes = invoker.check_includes
      }
      if (defined(invoker.data)) {
        data = invoker.data
      }
      if (defined(invoker.data_deps)) {
        data_deps = invoker.data_deps
      }
      if (defined(invoker.datadeps)) {
        datadeps = invoker.datadeps
      }
      if (defined(invoker.defines)) {
        defines = invoker.defines
      }
      if (defined(invoker.deps)) {
        deps = invoker.deps
      }
      if (defined(invoker.direct_dependent_configs)) {
        direct_dependent_configs = invoker.direct_dependent_configs
      }
      if (defined(invoker.forward_dependent_configs_from)) {
        forward_dependent_configs_from = invoker.forward_dependent_configs_from
      }
      if (defined(invoker.include_dirs)) {
        include_dirs = invoker.include_dirs
      }
      if (defined(invoker.ldflags)) {
        ldflags = invoker.ldflags
      }
      if (defined(invoker.lib_dirs)) {
        lib_dirs = invoker.lib_dirs
      }
      if (defined(invoker.libs)) {
        libs = invoker.libs
      }
      if (defined(invoker.output_extension)) {
        output_extension = invoker.output_extension
      }
      if (defined(invoker.output_name)) {
        output_name = invoker.output_name
      }
      if (defined(invoker.public)) {
        public = invoker.public
      }
      if (defined(invoker.public_configs)) {
        public_configs = invoker.public_configs
      }
      if (defined(invoker.public_deps)) {
        public_deps = invoker.public_deps
      }
      if (defined(invoker.sources)) {
        sources = invoker.sources
      }
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      if (defined(invoker.visibility)) {
        visibility = invoker.visibility
      }
    }
  } else {
    static_library(target_name) {
      # See above.
      configs = []  # Prevent list overwriting warning.
      configs = invoker.configs

      # See above call.
      set_sources_assignment_filter([])

      if (defined(invoker.all_dependent_configs)) {
        all_dependent_configs = invoker.all_dependent_configs
      }
      if (defined(invoker.allow_circular_includes_from)) {
        allow_circular_includes_from = invoker.allow_circular_includes_from
      }
      if (defined(invoker.cflags)) {
        cflags = invoker.cflags
      }
      if (defined(invoker.cflags_c)) {
        cflags_c = invoker.cflags_c
      }
      if (defined(invoker.cflags_cc)) {
        cflags_cc = invoker.cflags_cc
      }
      if (defined(invoker.cflags_objc)) {
        cflags_objc = invoker.cflags_objc
      }
      if (defined(invoker.cflags_objcc)) {
        cflags_objcc = invoker.cflags_objcc
      }
      if (defined(invoker.check_includes)) {
        check_includes = invoker.check_includes
      }
      if (defined(invoker.data)) {
        data = invoker.data
      }
      if (defined(invoker.data_deps)) {
        data_deps = invoker.data_deps
      }
      if (defined(invoker.datadeps)) {
        datadeps = invoker.datadeps
      }
      if (defined(invoker.defines)) {
        defines = invoker.defines
      }
      if (defined(invoker.deps)) {
        deps = invoker.deps
      }
      if (defined(invoker.direct_dependent_configs)) {
        direct_dependent_configs = invoker.direct_dependent_configs
      }
      if (defined(invoker.forward_dependent_configs_from)) {
        forward_dependent_configs_from = invoker.forward_dependent_configs_from
      }
      if (defined(invoker.include_dirs)) {
        include_dirs = invoker.include_dirs
      }
      if (defined(invoker.ldflags)) {
        ldflags = invoker.ldflags
      }
      if (defined(invoker.lib_dirs)) {
        lib_dirs = invoker.lib_dirs
      }
      if (defined(invoker.libs)) {
        libs = invoker.libs
      }
      if (defined(invoker.output_extension)) {
        output_extension = invoker.output_extension
      }
      if (defined(invoker.output_name)) {
        output_name = invoker.output_name
      }
      if (defined(invoker.public)) {
        public = invoker.public
      }
      if (defined(invoker.public_configs)) {
        public_configs = invoker.public_configs
      }
      if (defined(invoker.public_deps)) {
        public_deps = invoker.public_deps
      }
      if (defined(invoker.sources)) {
        sources = invoker.sources
      }
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      if (defined(invoker.visibility)) {
        visibility = invoker.visibility
      }
    }
  }
}

set_defaults("platform_library") {
  configs = default_compiler_configs
}
